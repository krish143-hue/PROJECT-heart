# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b6CFvgxA5fvbhH2b_zDcG8Psis1vROht
"""

import streamlit as st
import joblib
import numpy as np

# Load the trained model
def load_model():
    return joblib.load("best_model_tuned.pkl")

model = load_model()

st.set_page_config(page_title="Heart Disease Predictor", page_icon="‚ù§Ô∏è")
st.title("‚ù§Ô∏è Heart Disease Risk Checker")
st.write("This app uses a machine learning model to predict the likelihood of heart disease.")

# Collect user inputs
age = st.slider("Age", 20, 100, 50)
sex = st.selectbox("Sex", ["Male", "Female"])
cp = st.selectbox("Chest Pain Type", ["Typical angina", "Atypical angina", "Non-anginal pain", "Asymptomatic"])
trestbps = st.slider("Resting Blood Pressure (mm Hg)", 80, 200, 120)
chol = st.slider("Cholesterol (mg/dl)", 100, 600, 240)
fbs = st.selectbox("Fasting Blood Sugar > 120 mg/dl", ["True", "False"])
restecg = st.selectbox("Resting ECG Results", ["Normal", "ST-T wave abnormality", "Left ventricular hypertrophy"])
thalach = st.slider("Max Heart Rate Achieved", 60, 220, 150)
exang = st.selectbox("Exercise Induced Angina", ["Yes", "No"])
oldpeak = st.slider("ST Depression Induced by Exercise", 0.0, 6.0, 1.0)
slope = st.selectbox("Slope of Peak Exercise ST Segment", ["Upsloping", "Flat", "Downsloping"])
ca = st.selectbox("Number of Major Vessels Colored by Fluoroscopy", [0, 1, 2, 3, 4])
thal = st.selectbox("Thalassemia", ["Normal", "Fixed defect", "Reversable defect"])

# Mapping categorical inputs
sex_map = {"Male": 1, "Female": 0}
cp_map = {"Typical angina": 0, "Atypical angina": 1, "Non-anginal pain": 2, "Asymptomatic": 3}
fbs_map = {"True": 1, "False": 0}
restecg_map = {"Normal": 0, "ST-T wave abnormality": 1, "Left ventricular hypertrophy": 2}
exang_map = {"Yes": 1, "No": 0}
slope_map = {"Upsloping": 0, "Flat": 1, "Downsloping": 2}
thal_map = {"Normal": 1, "Fixed defect": 2, "Reversable defect": 3}

# Prepare the input data
input_data = np.array([
    age,
    sex_map[sex],
    cp_map[cp],
    trestbps,
    chol,
    fbs_map[fbs],
    restecg_map[restecg],
    thalach,
    exang_map[exang],
    oldpeak,
    slope_map[slope],
    ca,
    thal_map[thal]
]).reshape(1, -1)

# Predict button
if st.button("Check Risk"):
    prediction = model.predict(input_data)
    if prediction[0] == 1:
        st.error("‚ö†Ô∏è You may be at risk of heart disease. Please consult a doctor.")
    else:
        st.success("‚úÖ You are not likely at risk of heart disease. Stay healthy!")

# Chatbot like assistance
st.markdown("---")
st.subheader("üí¨ Virtual Health Assistant")
question = st.text_input("Ask a question about heart health:")

if question:
    q = question.lower()
    if "risk factors" in q:
        st.write("Common risk factors include smoking, obesity, high blood pressure, high cholesterol, diabetes, and lack of exercise.")
    elif "prevent" in q or "avoid" in q:
        st.write("To prevent heart disease, maintain a healthy diet, exercise regularly, avoid smoking, and monitor blood pressure and cholesterol levels.")
    elif "symptoms" in q:
        st.write("Symptoms of heart disease may include chest pain, shortness of breath, palpitations, fatigue, or even no symptoms at all.")
    elif "thank" in q:
        st.write("You're welcome! Stay heart-smart! ‚ù§Ô∏è")
    else:
        st.write("I'm here to help, but I recommend consulting a healthcare provider for detailed advice.")